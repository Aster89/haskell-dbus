:# Copyright (C) 2009-2011 John Millikin <jmillikin@gmail.com>
:# 
:# This program is free software: you can redistribute it and/or modify
:# it under the terms of the GNU General Public License as published by
:# the Free Software Foundation, either version 3 of the License, or
:# any later version.
:# 
:# This program is distributed in the hope that it will be useful,
:# but WITHOUT ANY WARRANTY; without even the implied warranty of
:# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
:# GNU General Public License for more details.
:# 
:# You should have received a copy of the GNU General Public License
:# along with this program.  If not, see <http://www.gnu.org/licenses/>.

\section{Module headers}

:f DBus/Types.hs
|copyright|
module DBus.Types
	( Type(..)
	
	, Signature
	, signature
	, signature_
	, signatureText
	, signatureTypes
	
	, IsValue
	, IsAtom
	, Variant
	
	, IsVariant(..)
	, variantType
	
	, ObjectPath
	, objectPath
	, objectPath_
	, objectPathText
	
	, InterfaceName
	, interfaceName
	, interfaceName_
	, interfaceNameText
	
	, MemberName
	, memberName
	, memberName_
	, memberNameText
	
	, ErrorName
	, errorName
	, errorName_
	, errorNameText
	
	, BusName
	, busName
	, busName_
	, busNameText
	) where
import DBus.Types.Internal
:

:f DBus/Types/Internal.hs
|copyright|
module DBus.Types.Internal where
import           Control.Monad (when)
import           Data.ByteString (ByteString)
import           Data.Int
import           Data.List (intercalate)
import qualified Data.Map
import           Data.Map (Map)
import qualified Data.String
import qualified Data.Text
import           Data.Text (Text)
import qualified Data.Text.Encoding
import qualified Data.Text.Lazy
import qualified Data.Vector
import           Data.Vector (Vector)
import           Data.Word
|text validation imports|
|signature parsing imports|

import           DBus.Util (void)

|DBus.Types|
|text validation|
:

:f DBus/Wire.hs
|copyright|
module DBus.Wire
	( Endianness (..)
	, MarshalError (..)
	, UnmarshalError (..)
	, marshalMessage
	, unmarshalMessage
	) where
import DBus.Wire.Internal
:

:f DBus/Wire/Internal.hs
{-# LANGUAGE OverloadedStrings #-}
|copyright|
module DBus.Wire.Internal where
import Control.Monad (liftM, when, unless)

import qualified Data.Binary.Builder
import qualified Data.Binary.Get
import           Data.Binary.Put (runPut)
import           Data.Bits ((.&.), (.|.))
import qualified Data.ByteString
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Lazy
import           Data.Int (Int16, Int32, Int64)
import qualified Data.Map
import           Data.Map (Map)
import           Data.Maybe (fromJust, listToMaybe, fromMaybe)
import qualified Data.Set
import           Data.Set (Set)
import qualified Data.Text
import           Data.Text (Text)
import qualified Data.Vector
import           Data.Vector (Vector)
import           Data.Word (Word8, Word16, Word32, Word64)

import qualified Data.Binary.IEEE754

import           DBus.Message.Internal
import           DBus.Types.Internal
import           DBus.Wire.Unicode (maybeEncodeUtf8, maybeDecodeUtf8)
import           DBus.Util (void, untilM)
import qualified DBus.Util.MonadError as E

|DBus.Wire|
:

:f DBus/Wire/Unicode.hs
module DBus.Wire.Unicode
	( maybeEncodeUtf8
	, maybeDecodeUtf8
	) where
import Data.ByteString (ByteString)
import Data.Text (Text)
import Data.Text.Encoding (encodeUtf8, decodeUtf8)
import Data.Text.Encoding.Error (UnicodeException)
import qualified Control.Exception as Exc
import System.IO.Unsafe (unsafePerformIO)
|DBus.Wire.Unicode|
:
